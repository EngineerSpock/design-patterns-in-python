Рассмотрим квадратное уравнение и его каноническое решение:
Часть b^2-4*a*c называется дискриминантом. Предположим, что мы хотим предоставить два API с разными стратегиями вычисления дискриминанта.

В стратегии OrdinaryDiscriminantStrategy , если дискриминант < 0, его так и возвращаем. Это нормально, потому что основной API так или иначе возвращает пару комплексных чисел.

В стратегии RealDiscriminantStrategy ,  если дискриминант < 0, то надо возвращать NaN (not a number). NaN проходит через вычисления, и solver даёт два NaN значения. В Python, вы можете создать такое число с помощью float('nan').

Реализуйте как обе стратегии, так и solver (алгоритм решения). Что касается плюсов и минусов в формуле: возвращайте положительный результат первым элементов, а отрицательный вторым. Заметьте что solve() должен возвращать комплексные числа!